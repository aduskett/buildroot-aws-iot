config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT
	bool "aws-iot-device-client"
	depends on BR2_INSTALL_LIBSTDCPP
	select BR2_PACKAGE_AWS_C_AUTH
	select BR2_PACKAGE_AWS_C_CAL
	select BR2_PACKAGE_AWS_C_COMMON
	select BR2_PACKAGE_AWS_C_COMPRESSION
	select BR2_PACKAGE_AWS_C_EVENT_STREAM
	select BR2_PACKAGE_AWS_CHECKSUMS
	select BR2_PACKAGE_AWS_C_HTTP
	select BR2_PACKAGE_AWS_C_IO
	select BR2_PACKAGE_AWS_C_MQTT
	select BR2_PACKAGE_AWS_C_MQTT_WEBSOCKETS
	select BR2_PACKAGE_AWS_CRT_CPP
	select BR2_PACKAGE_AWS_C_S3
	select BR2_PACKAGE_AWS_IOT_DEVICE_SDK_CPP_V2
	select BR2_PACKAGE_OPENSSL
	help
	  The AWS IoT Device Client is free, open-source, modular
	  software written in C++ that you can compile and install on
	  your Embedded Linux based IoT devices to access AWS IoT Core,
	  AWS IoT Device Management, and AWS IoT Device Defender
	  features by default. It serves as a reference implementation
	  for your IoT devices to work with AWS IoT services, with
	  operational best practices baked in – using it is the easiest
	  way to create a proof-of-concept (PoC) for your IoT project.
	  What’s more, since it is open-source, you can modify it to fit
	  your business needs, or optimize it when you wish to scale up
	  from a PoC to production.

	  Notice: Running the AWS IoT Device Client will incur usage of
	  AWS IoT services, and is likely to incur charges on your AWS
	  account. Please refer the pricing pages for AWS IoT Core, AWS
	  IoT Device Management, and AWS IoT Device Defender for more
	  details.

	  https://github.com/awslabs/aws-iot-device-client

if BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_INSTALL_SETUP_SCRIPT
	  bool "Install setup script"
	  help
	    Install the setup.sh script to
	    /usr/bin/aws-iot-device-client-setup. Otherwise, the
	    configuration file will have to be manually generated.

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_JOBS
	bool "Jobs"
	help
	  The Jobs feature within the AWS IoT Device Client provides
	  device-side functionality for execution of jobs created. When
	  the Jobs feature starts within the AWS IoT Device Client, the
	  feature will attempt to establish subscriptions to important
	  notification topics, and will also publish a request to
	  receive the latest pending jobs. It will use the shared
	  MQTT connection to subscribe/publish to these topics.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/jobs/README.md

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_DD
	bool "Device Defender"
	help
	  The Device Defender feature within the AWS IoT Device Client
	  publishes device-side metrics about the device to the cloud.
	  You can then use the cloud-side service to identify unusual
	  behavior that might indicate a compromised device by
	  monitoring the behavior of your devices.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/devicedefender/README.md

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_ST
	bool "Secure Tunneling"
	help
	  The Secure Tunneling feature allows you to gain access to a
	  remote device even if the device is behind a firewall.
	  You may want to remote access to a device to troubleshoot, or
	  update its configuration.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/tunneling/README.md

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_FP
	bool "Fleet provisioning"
	help
	  The AWS IoT Device Client has the capability to provision your
	  IoT device when you connect it to AWS IoT Core for the first
	  time. The device client provides two different mechanisms for
	  provisioning your device (1) using a claim certificate and
	  private key and (2) using a CSR file
	  (along with claim certificate and key) to securely provision
	  the device while keeping the user private key secure.

	  After all required information is provided, the Fleet
	  Provisioning Feature will provision, register the device with
	  AWS IoT Core, and then establish a connection to IoT Core
	  that is ready for use by other Device Client features.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/fleetprovisioning/README.md

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SAMPLES
	bool "Build samples"
	help
	  Build sample features

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_PUBSUB_SAMPLES
	bool "Pubsub samples"
	help
	  The Pub Sub sample feature was designed to illustrate how
	  you might take advantage of the shared mqtt connection that
	  exists in the SharedCrtResourceManager. The Pub Sub sample
	  feature will publish data from a configured publish-file to
	  a publish-topic, and will recieve messages on a configured
	  subscribe-topic and write them to a subscribe-file.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/samples/pubsub/README.md

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SHADOW
	bool "Shadow"
	help
	  The AWS IoT Device Shadow service adds shadows to AWS IoT
	  thing objects, which provides a reliable data store for
	  devices, apps, and other cloud services to share data.
	  The client-side Named Shadows feature enables you to control
	  your IoT device using AWS IoT Named Shadows. Shadows can store
	  your device's state information and make it available to your
	  device, AWS IoT services, your custom apps and other AWS
	  services whether the device is online and connected to AWS IoT
	  or not.

	  https://github.com/awslabs/aws-iot-device-client/blob/main/source/shadow/README.md

if BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SHADOW

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SHADOW_CONFIG
	bool "Shadow config"
	help
	  Build the device client with the IoT Config Shadow features.

config BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SHADOW_SAMPLES
	bool "Shadow sample"
	help
	  Build the device client with the IoT sample shadow feature.

endif # if BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT_SHADOW

endif # if BR2_PACKAGE_AWS_IOT_DEVICE_CLIENT

comment "aws-iot-device-client needs a toolchain w/ C++"
	depends on !BR2_INSTALL_LIBSTDCPP
