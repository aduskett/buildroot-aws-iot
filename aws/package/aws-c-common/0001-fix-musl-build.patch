From a956cf34c23fe06aa97a74559ef3aaaed9fac872 Mon Sep 17 00:00:00 2001
From: Ryan Burns <rtburns@protonmail.com>
Date: Tue, 26 Jan 2021 18:06:41 -0800
Subject: [PATCH] Fix musl build

Some platforms, such as musl, do not have support for
the nonportable pthread_attr_setaffinity_np function.
Some of those without may be able to fall back to
pthread_setaffinity_np.

We can directly check for support using CMake's CheckSymbolExists,
and enable/disable this functionality accordingly.

Signed-off-by: Ryan Burns <rtburns@protonmail.com>
---
 CMakeLists.txt                |  3 +++
 cmake/AwsThreadAffinity.cmake | 40 +++++++++++++++++++++++++++++++++++
 source/posix/thread.c         | 23 ++++++++++++++++++--
 3 files changed, 64 insertions(+), 2 deletions(-)
 create mode 100644 cmake/AwsThreadAffinity.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6e7b221c9..fbf6a7715 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,6 +23,7 @@ include(AwsCheckHeaders)
 include(AwsSharedLibSetup)
 include(AwsFeatureTests)
 include(AwsSanitizers)
+include(AwsThreadAffinity)
 include(AwsSIMD)
 include(CTest)
 
@@ -165,6 +166,8 @@ if (UNIX AND NOT APPLE AND NOT ${CMAKE_SYSTEM_NAME} MATCHES FreeBSD)
     target_compile_definitions(${PROJECT_NAME} PRIVATE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=500)
 endif()
 
+aws_set_thread_affinity_method(${PROJECT_NAME})
+
 aws_add_sanitizers(${PROJECT_NAME} BLACKLIST "sanitizer-blacklist.txt")
 target_link_libraries(${PROJECT_NAME} PUBLIC ${PLATFORM_LIBS})
 target_compile_definitions(${PROJECT_NAME} PRIVATE ${PLATFORM_DEFINES})
diff --git a/cmake/AwsThreadAffinity.cmake b/cmake/AwsThreadAffinity.cmake
new file mode 100644
index 000000000..efb1a4d73
--- /dev/null
+++ b/cmake/AwsThreadAffinity.cmake
@@ -0,0 +1,40 @@
+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
+# SPDX-License-Identifier: Apache-2.0.
+
+include(CheckSymbolExists)
+
+# Check if the platform supports setting thread affinity
+# (important for hitting full NIC entitlement on NUMA architectures)
+function(aws_set_thread_affinity_method target)
+
+    # Non-POSIX, Android, and Apple platforms do not support thread affinity.
+    if (NOT UNIX OR ANDROID OR APPLE)
+        return()
+    endif()
+
+    set(CMAKE_REQUIRED_DEFINITIONS "-D_GNU_SOURCE")
+
+    set(headers "pthread.h")
+    # BSDs put nonportable pthread declarations in a separate header.
+    if(CMAKE_SYSTEM_NAME MATCHES BSD)
+        set(headers "${headers};pthread_np.h")
+    endif()
+
+    # Using pthread attrs is the preferred method, but is glibc-specific.
+    check_symbol_exists(pthread_attr_setaffinity_np "${headers}" USE_PTHREAD_ATTR_SETAFFINITY)
+    if (USE_PTHREAD_ATTR_SETAFFINITY)
+        target_compile_definitions(${target} PRIVATE -DUSE_PTHREAD_ATTR_SETAFFINITY)
+        return()
+    endif()
+
+    # This method is still nonportable, but is supported by musl and BSDs.
+    check_symbol_exists(pthread_setaffinity_np "${headers}" USE_PTHREAD_SETAFFINITY)
+    if (USE_PTHREAD_ATTR_SETAFFINITY)
+        target_compile_definitions(${target} PRIVATE -DUSE_PTHREAD_ATTR_SETAFFINITY)
+        return()
+    endif()
+
+    # If we got here, we expected thread affinity support but didn't find it.
+    # We still build with degraded NUMA performance, but show a warning.
+    message(WARNING "No supported method for setting thread affinity")
+endfunction()
diff --git a/source/posix/thread.c b/source/posix/thread.c
index 05e3f6372..a6add7d79 100644
--- a/source/posix/thread.c
+++ b/source/posix/thread.c
@@ -160,7 +160,7 @@ int aws_thread_launch(
  * NUMA or not is setup in interleave mode.
  * Thread afinity is also not supported on Android systems, and honestly, if you're running android on a NUMA
  * configuration, you've got bigger problems. */
-#if !defined(__MACH__) && !defined(__ANDROID__)
+#if defined(USE_PTHREAD_ATTR_SETAFFINITY) || defined(USE_PTHREAD_SETAFFINITY)
         if (options->cpu_id >= 0) {
             AWS_LOGF_INFO(
                 AWS_LS_COMMON_THREAD,
@@ -172,6 +172,7 @@ int aws_thread_launch(
             CPU_ZERO(&cpuset);
             CPU_SET((uint32_t)options->cpu_id, &cpuset);
 
+#if defined(USE_PTHREAD_ATTR_SETAFFINITY)
             attr_return = pthread_attr_setaffinity_np(attributes_ptr, sizeof(cpuset), &cpuset);
 
             if (attr_return) {
@@ -182,8 +183,9 @@ int aws_thread_launch(
                     errno);
                 goto cleanup;
             }
+#endif /* defined(USE_PTHREAD_ATTR_SETAFFINITY) */
         }
-#endif /* !defined(__MACH__) && !defined(__ANDROID__) */
+#endif /* defined(USE_PTHREAD_ATTR_SETAFFINITY) || defined(USE_PTHREAD_SETAFFINITY) */
     }
 
     struct thread_wrapper *wrapper =
@@ -208,6 +210,23 @@ int aws_thread_launch(
         goto cleanup;
     }
 
+#if defined(USE_PTHREAD_SETAFFINITY)
+    /* If we don't have pthread_attr_setaffinity_np, we may
+     * still be able to set the thread affinity after creation. */
+    if (options && options->cpu_id >= 0) {
+        attr_return = pthread_setaffinity_np(
+                &thread->thread_id, sizeof(cpuset), &cpuset);
+        if (attr_return) {
+            AWS_LOGF_ERROR(
+                AWS_LS_COMMON_THREAD,
+                "id=%p: pthread_setaffinity_np() failed with %d.",
+                (void *)thread,
+                errno);
+            goto cleanup;
+        }
+    }
+#endif /* defined(USE_PTHREAD_SETAFFINITY) */
+
     thread->detach_state = AWS_THREAD_JOINABLE;
 
 cleanup:

